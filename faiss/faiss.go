// WARNING: This file has automatically been generated on Wed, 07 Jul 2021 11:26:07 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package faiss

/*
#cgo LDFLAGS: -Wl,--unresolved-symbols=ignore-in-object-files
#include "faiss_c.h"
#include "Index_c.h"
#include "AutoTune_c.h"
#include "clone_index_c.h"
#include "Clustering_c.h"
#include "error_c.h"
#include "index_factory_c.h"
#include "IndexFlat_c.h"
#include "index_io_c.h"
#include "IndexIVF_c.h"
#include "IndexIVFFlat_c.h"
#include "IndexLSH_c.h"
#include "IndexPreTransform_c.h"
#include "IndexShards_c.h"
#include "MetaIndexes_c.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// faiss_Index_free function as declared in faiss/Index_c.h:43
func faiss_Index_free(Obj *FaissIndex) {
	cObj, cObjAllocMap := (*C.FaissIndex)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_Index_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_Index_d function as declared in faiss/Index_c.h:46
func faiss_Index_d(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_d(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_is_trained function as declared in faiss/Index_c.h:49
func faiss_Index_is_trained(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_is_trained(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_ntotal function as declared in faiss/Index_c.h:52
func faiss_Index_ntotal(Arg0 *FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_ntotal(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_metric_type function as declared in faiss/Index_c.h:55
func faiss_Index_metric_type(Arg0 *FaissIndex) FaissMetricType {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Index_metric_type(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (FaissMetricType)(__ret)
	return __v
}

// faiss_Index_train function as declared in faiss/Index_c.h:63
func faiss_Index_train(Index *FaissIndex, N int32, X *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_Index_train(cIndex, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_add function as declared in faiss/Index_c.h:73
func faiss_Index_add(Index *FaissIndex, N int32, X *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	__ret := C.faiss_Index_add(cIndex, cN, cX)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_add_with_ids function as declared in faiss/Index_c.h:83
func faiss_Index_add_with_ids(Index *FaissIndex, N int32, X *float32, Xids *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cXids, cXidsAllocMap := (*C.idx_t)(unsafe.Pointer(Xids)), cgoAllocsUnknown
	__ret := C.faiss_Index_add_with_ids(cIndex, cN, cX, cXids)
	runtime.KeepAlive(cXidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_search function as declared in faiss/Index_c.h:95
func faiss_Index_search(Index *FaissIndex, N int32, X *float32, K int32, Distances *float32, Labels *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	cDistances, cDistancesAllocMap := (*C.float)(unsafe.Pointer(Distances)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	__ret := C.faiss_Index_search(cIndex, cN, cX, cK, cDistances, cLabels)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cDistancesAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_range_search function as declared in faiss/Index_c.h:109
func faiss_Index_range_search(Index *FaissIndex, N int32, X *float32, Radius float32, Result *FaissRangeSearchResult) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cRadius, cRadiusAllocMap := (C.float)(Radius), cgoAllocsUnknown
	cResult, cResultAllocMap := (*C.FaissRangeSearchResult)(unsafe.Pointer(Result)), cgoAllocsUnknown
	__ret := C.faiss_Index_range_search(cIndex, cN, cX, cRadius, cResult)
	runtime.KeepAlive(cResultAllocMap)
	runtime.KeepAlive(cRadiusAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_assign function as declared in faiss/Index_c.h:119
func faiss_Index_assign(Index *FaissIndex, N int32, X *float32, Labels *int32, K int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	__ret := C.faiss_Index_assign(cIndex, cN, cX, cLabels, cK)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_reset function as declared in faiss/Index_c.h:124
func faiss_Index_reset(Index *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_Index_reset(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_remove_ids function as declared in faiss/Index_c.h:130
func faiss_Index_remove_ids(Index *FaissIndex, Sel *FaissIDSelector, N_removed *uint32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cSel, cSelAllocMap := (*C.FaissIDSelector)(unsafe.Pointer(Sel)), cgoAllocsUnknown
	cN_removed, cN_removedAllocMap := (*C.size_t)(unsafe.Pointer(N_removed)), cgoAllocsUnknown
	__ret := C.faiss_Index_remove_ids(cIndex, cSel, cN_removed)
	runtime.KeepAlive(cN_removedAllocMap)
	runtime.KeepAlive(cSelAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_reconstruct function as declared in faiss/Index_c.h:139
func faiss_Index_reconstruct(Index *FaissIndex, Key int32, Recons *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cKey, cKeyAllocMap := (C.idx_t)(Key), cgoAllocsUnknown
	cRecons, cReconsAllocMap := (*C.float)(unsafe.Pointer(Recons)), cgoAllocsUnknown
	__ret := C.faiss_Index_reconstruct(cIndex, cKey, cRecons)
	runtime.KeepAlive(cReconsAllocMap)
	runtime.KeepAlive(cKeyAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_reconstruct_n function as declared in faiss/Index_c.h:147
func faiss_Index_reconstruct_n(Index *FaissIndex, I0 int32, Ni int32, Recons *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cI0, cI0AllocMap := (C.idx_t)(I0), cgoAllocsUnknown
	cNi, cNiAllocMap := (C.idx_t)(Ni), cgoAllocsUnknown
	cRecons, cReconsAllocMap := (*C.float)(unsafe.Pointer(Recons)), cgoAllocsUnknown
	__ret := C.faiss_Index_reconstruct_n(cIndex, cI0, cNi, cRecons)
	runtime.KeepAlive(cReconsAllocMap)
	runtime.KeepAlive(cNiAllocMap)
	runtime.KeepAlive(cI0AllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_compute_residual function as declared in faiss/Index_c.h:161
func faiss_Index_compute_residual(Index *FaissIndex, X *float32, Residual *float32, Key int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cResidual, cResidualAllocMap := (*C.float)(unsafe.Pointer(Residual)), cgoAllocsUnknown
	cKey, cKeyAllocMap := (C.idx_t)(Key), cgoAllocsUnknown
	__ret := C.faiss_Index_compute_residual(cIndex, cX, cResidual, cKey)
	runtime.KeepAlive(cKeyAllocMap)
	runtime.KeepAlive(cResidualAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Index_compute_residual_n function as declared in faiss/Index_c.h:176
func faiss_Index_compute_residual_n(Index *FaissIndex, N int32, X *float32, Residuals *float32, Keys *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cResiduals, cResidualsAllocMap := (*C.float)(unsafe.Pointer(Residuals)), cgoAllocsUnknown
	cKeys, cKeysAllocMap := (*C.idx_t)(unsafe.Pointer(Keys)), cgoAllocsUnknown
	__ret := C.faiss_Index_compute_residual_n(cIndex, cN, cX, cResiduals, cKeys)
	runtime.KeepAlive(cKeysAllocMap)
	runtime.KeepAlive(cResidualsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ParameterRange_name function as declared in faiss/AutoTune_c.h:24
func faiss_ParameterRange_name(Arg0 *FaissParameterRange) string {
	cArg0, cArg0AllocMap := (*C.FaissParameterRange)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ParameterRange_name(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := packPCharString(__ret)
	return __v
}

// faiss_ParameterRange_values function as declared in faiss/AutoTune_c.h:28
func faiss_ParameterRange_values(Arg0 *FaissParameterRange, Arg1 []*float64, Arg2 *uint32) {
	cArg0, cArg0AllocMap := (*C.FaissParameterRange)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := copyPDoubleBytes((*sliceHeader)(unsafe.Pointer(&Arg1)))
	cArg2, cArg2AllocMap := (*C.size_t)(unsafe.Pointer(Arg2)), cgoAllocsUnknown
	C.faiss_ParameterRange_values(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// faiss_ParameterSpace_new function as declared in faiss/AutoTune_c.h:35
func faiss_ParameterSpace_new(Space **FaissParameterSpace) int32 {
	cSpace, cSpaceAllocMap := (**C.FaissParameterSpace)(unsafe.Pointer(Space)), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_new(cSpace)
	runtime.KeepAlive(cSpaceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ParameterSpace_n_combinations function as declared in faiss/AutoTune_c.h:38
func faiss_ParameterSpace_n_combinations(Arg0 *FaissParameterSpace) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_n_combinations(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// faiss_ParameterSpace_combination_name function as declared in faiss/AutoTune_c.h:43
func faiss_ParameterSpace_combination_name(Arg0 *FaissParameterSpace, Arg1 uint32, Arg2 *byte, Arg3 uint32) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.size_t)(Arg1), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (*C.char)(unsafe.Pointer(Arg2)), cgoAllocsUnknown
	cArg3, cArg3AllocMap := (C.size_t)(Arg3), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_combination_name(cArg0, cArg1, cArg2, cArg3)
	runtime.KeepAlive(cArg3AllocMap)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ParameterSpace_set_index_parameters function as declared in faiss/AutoTune_c.h:46
func faiss_ParameterSpace_set_index_parameters(Arg0 *FaissParameterSpace, Arg1 *FaissIndex, Arg2 string) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	Arg2 = safeString(Arg2)
	cArg2, cArg2AllocMap := unpackPCharString(Arg2)
	__ret := C.faiss_ParameterSpace_set_index_parameters(cArg0, cArg1, cArg2)
	runtime.KeepAlive(Arg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ParameterSpace_set_index_parameters_cno function as declared in faiss/AutoTune_c.h:49
func faiss_ParameterSpace_set_index_parameters_cno(Arg0 *FaissParameterSpace, Arg1 *FaissIndex, Arg2 uint32) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (C.size_t)(Arg2), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_set_index_parameters_cno(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ParameterSpace_set_index_parameter function as declared in faiss/AutoTune_c.h:52
func faiss_ParameterSpace_set_index_parameter(Arg0 *FaissParameterSpace, Arg1 *FaissIndex, Arg2 string, Arg3 float64) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg1)), cgoAllocsUnknown
	Arg2 = safeString(Arg2)
	cArg2, cArg2AllocMap := unpackPCharString(Arg2)
	cArg3, cArg3AllocMap := (C.double)(Arg3), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_set_index_parameter(cArg0, cArg1, cArg2, cArg3)
	runtime.KeepAlive(cArg3AllocMap)
	runtime.KeepAlive(Arg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ParameterSpace_display function as declared in faiss/AutoTune_c.h:55
func faiss_ParameterSpace_display(Arg0 *FaissParameterSpace) {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	C.faiss_ParameterSpace_display(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
}

// faiss_ParameterSpace_add_range function as declared in faiss/AutoTune_c.h:58
func faiss_ParameterSpace_add_range(Arg0 *FaissParameterSpace, Arg1 string, Arg2 **FaissParameterRange) int32 {
	cArg0, cArg0AllocMap := (*C.FaissParameterSpace)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	Arg1 = safeString(Arg1)
	cArg1, cArg1AllocMap := unpackPCharString(Arg1)
	cArg2, cArg2AllocMap := (**C.FaissParameterRange)(unsafe.Pointer(Arg2)), cgoAllocsUnknown
	__ret := C.faiss_ParameterSpace_add_range(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(Arg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_clone_index function as declared in faiss/clone_index_c.h:27
func faiss_clone_index(Arg0 *FaissIndex, P_out **FaissIndex) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cP_out, cP_outAllocMap := (**C.FaissIndex)(unsafe.Pointer(P_out)), cgoAllocsUnknown
	__ret := C.faiss_clone_index(cArg0, cP_out)
	runtime.KeepAlive(cP_outAllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_ClusteringParameters_init function as declared in faiss/Clustering_c.h:41
func faiss_ClusteringParameters_init(Params *FaissClusteringParameters) {
	cParams, cParamsAllocMap := (*C.FaissClusteringParameters)(unsafe.Pointer(Params)), cgoAllocsUnknown
	C.faiss_ClusteringParameters_init(cParams)
	runtime.KeepAlive(cParamsAllocMap)
}

// faiss_Clustering_niter function as declared in faiss/Clustering_c.h:60
func faiss_Clustering_niter(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_niter(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_nredo function as declared in faiss/Clustering_c.h:61
func faiss_Clustering_nredo(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_nredo(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_verbose function as declared in faiss/Clustering_c.h:62
func faiss_Clustering_verbose(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_verbose(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_spherical function as declared in faiss/Clustering_c.h:63
func faiss_Clustering_spherical(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_spherical(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_update_index function as declared in faiss/Clustering_c.h:64
func faiss_Clustering_update_index(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_update_index(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_frozen_centroids function as declared in faiss/Clustering_c.h:65
func faiss_Clustering_frozen_centroids(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_frozen_centroids(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_min_points_per_centroid function as declared in faiss/Clustering_c.h:67
func faiss_Clustering_min_points_per_centroid(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_min_points_per_centroid(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_max_points_per_centroid function as declared in faiss/Clustering_c.h:68
func faiss_Clustering_max_points_per_centroid(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_max_points_per_centroid(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_seed function as declared in faiss/Clustering_c.h:70
func faiss_Clustering_seed(Arg0 *FaissClustering) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_seed(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_d function as declared in faiss/Clustering_c.h:73
func faiss_Clustering_d(Arg0 *FaissClustering) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_d(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// faiss_Clustering_k function as declared in faiss/Clustering_c.h:76
func faiss_Clustering_k(Arg0 *FaissClustering) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissClustering)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_k(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// faiss_ClusteringIterationStats_obj function as declared in faiss/Clustering_c.h:79
func faiss_ClusteringIterationStats_obj(Arg0 *FaissClusteringIterationStats) float32 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_obj(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// faiss_ClusteringIterationStats_time function as declared in faiss/Clustering_c.h:80
func faiss_ClusteringIterationStats_time(Arg0 *FaissClusteringIterationStats) float64 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_time(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// faiss_ClusteringIterationStats_time_search function as declared in faiss/Clustering_c.h:81
func faiss_ClusteringIterationStats_time_search(Arg0 *FaissClusteringIterationStats) float64 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_time_search(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// faiss_ClusteringIterationStats_imbalance_factor function as declared in faiss/Clustering_c.h:82
func faiss_ClusteringIterationStats_imbalance_factor(Arg0 *FaissClusteringIterationStats) float64 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_imbalance_factor(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// faiss_ClusteringIterationStats_nsplit function as declared in faiss/Clustering_c.h:83
func faiss_ClusteringIterationStats_nsplit(Arg0 *FaissClusteringIterationStats) int32 {
	cArg0, cArg0AllocMap := (*C.FaissClusteringIterationStats)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_ClusteringIterationStats_nsplit(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_centroids function as declared in faiss/Clustering_c.h:86
func faiss_Clustering_centroids(Clustering *FaissClustering, Centroids []*float32, Size *uint32) {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	cCentroids, cCentroidsAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&Centroids)))
	cSize, cSizeAllocMap := (*C.size_t)(unsafe.Pointer(Size)), cgoAllocsUnknown
	C.faiss_Clustering_centroids(cClustering, cCentroids, cSize)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cCentroidsAllocMap)
	runtime.KeepAlive(cClusteringAllocMap)
}

// faiss_Clustering_iteration_stats function as declared in faiss/Clustering_c.h:90
func faiss_Clustering_iteration_stats(Clustering *FaissClustering, Iteration_stats **FaissClusteringIterationStats, Size *uint32) {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	cIteration_stats, cIteration_statsAllocMap := (**C.FaissClusteringIterationStats)(unsafe.Pointer(Iteration_stats)), cgoAllocsUnknown
	cSize, cSizeAllocMap := (*C.size_t)(unsafe.Pointer(Size)), cgoAllocsUnknown
	C.faiss_Clustering_iteration_stats(cClustering, cIteration_stats, cSize)
	runtime.KeepAlive(cSizeAllocMap)
	runtime.KeepAlive(cIteration_statsAllocMap)
	runtime.KeepAlive(cClusteringAllocMap)
}

// faiss_Clustering_new function as declared in faiss/Clustering_c.h:94
func faiss_Clustering_new(P_clustering **FaissClustering, D int32, K int32) int32 {
	cP_clustering, cP_clusteringAllocMap := (**C.FaissClustering)(unsafe.Pointer(P_clustering)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	cK, cKAllocMap := (C.int)(K), cgoAllocsUnknown
	__ret := C.faiss_Clustering_new(cP_clustering, cD, cK)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_clusteringAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_new_with_params function as declared in faiss/Clustering_c.h:96
func faiss_Clustering_new_with_params(P_clustering **FaissClustering, D int32, K int32, Cp *FaissClusteringParameters) int32 {
	cP_clustering, cP_clusteringAllocMap := (**C.FaissClustering)(unsafe.Pointer(P_clustering)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	cK, cKAllocMap := (C.int)(K), cgoAllocsUnknown
	cCp, cCpAllocMap := (*C.FaissClusteringParameters)(unsafe.Pointer(Cp)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_new_with_params(cP_clustering, cD, cK, cCp)
	runtime.KeepAlive(cCpAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_clusteringAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_train function as declared in faiss/Clustering_c.h:99
func faiss_Clustering_train(Clustering *FaissClustering, N int32, X *float32, Index *FaissIndex) int32 {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_Clustering_train(cClustering, cN, cX, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cClusteringAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_Clustering_free function as declared in faiss/Clustering_c.h:102
func faiss_Clustering_free(Clustering *FaissClustering) {
	cClustering, cClusteringAllocMap := (*C.FaissClustering)(unsafe.Pointer(Clustering)), cgoAllocsUnknown
	C.faiss_Clustering_free(cClustering)
	runtime.KeepAlive(cClusteringAllocMap)
}

// faiss_kmeans_clustering function as declared in faiss/Clustering_c.h:114
func faiss_kmeans_clustering(D uint32, N uint32, K uint32, X *float32, Centroids *float32, Q_error *float32) int32 {
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cN, cNAllocMap := (C.size_t)(N), cgoAllocsUnknown
	cK, cKAllocMap := (C.size_t)(K), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cCentroids, cCentroidsAllocMap := (*C.float)(unsafe.Pointer(Centroids)), cgoAllocsUnknown
	cQ_error, cQ_errorAllocMap := (*C.float)(unsafe.Pointer(Q_error)), cgoAllocsUnknown
	__ret := C.faiss_kmeans_clustering(cD, cN, cK, cX, cCentroids, cQ_error)
	runtime.KeepAlive(cQ_errorAllocMap)
	runtime.KeepAlive(cCentroidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cDAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_get_last_error function as declared in faiss/error_c.h:36
func faiss_get_last_error() string {
	__ret := C.faiss_get_last_error()
	__v := packPCharString(__ret)
	return __v
}

// faiss_index_factory function as declared in faiss/index_factory_c.h:24
func faiss_index_factory(P_index **FaissIndex, D int32, Description string, Metric FaissMetricType) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndex)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.int)(D), cgoAllocsUnknown
	Description = safeString(Description)
	cDescription, cDescriptionAllocMap := unpackPCharString(Description)
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_index_factory(cP_index, cD, cDescription, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(Description)
	runtime.KeepAlive(cDescriptionAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlat_new function as declared in faiss/IndexFlat_c.h:27
func faiss_IndexFlat_new(P_index **FaissIndexFlat) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlat)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_new(cP_index)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlat_new_with function as declared in faiss/IndexFlat_c.h:29
func faiss_IndexFlat_new_with(P_index **FaissIndexFlat, D int32, Metric FaissMetricType) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlat)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_new_with(cP_index, cD, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlat_xb function as declared in faiss/IndexFlat_c.h:38
func faiss_IndexFlat_xb(Index *FaissIndexFlat, P_xb []*float32, P_size *uint32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexFlat)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cP_xb, cP_xbAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&P_xb)))
	cP_size, cP_sizeAllocMap := (*C.size_t)(unsafe.Pointer(P_size)), cgoAllocsUnknown
	C.faiss_IndexFlat_xb(cIndex, cP_xb, cP_size)
	runtime.KeepAlive(cP_sizeAllocMap)
	runtime.KeepAlive(cP_xbAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// faiss_IndexFlat_cast function as declared in faiss/IndexFlat_c.h:46
func faiss_IndexFlat_cast(Arg0 *FaissIndex) *FaissIndexFlat {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexFlat)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexFlat_free function as declared in faiss/IndexFlat_c.h:48
func faiss_IndexFlat_free(Obj *FaissIndexFlat) {
	cObj, cObjAllocMap := (*C.FaissIndexFlat)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexFlat_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_IndexFlat_compute_distance_subset function as declared in faiss/IndexFlat_c.h:59
func faiss_IndexFlat_compute_distance_subset(Index *FaissIndex, N int32, X *float32, K int32, Distances *float32, Labels *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	cDistances, cDistancesAllocMap := (*C.float)(unsafe.Pointer(Distances)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat_compute_distance_subset(cIndex, cN, cX, cK, cDistances, cLabels)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cDistancesAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlatIP_new function as declared in faiss/IndexFlat_c.h:70
func faiss_IndexFlatIP_new(P_index **FaissIndexFlatIP) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlatIP)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatIP_new(cP_index)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlatIP_new_with function as declared in faiss/IndexFlat_c.h:72
func faiss_IndexFlatIP_new_with(P_index **FaissIndexFlatIP, D int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlatIP)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatIP_new_with(cP_index, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlatL2_new function as declared in faiss/IndexFlat_c.h:77
func faiss_IndexFlatL2_new(P_index **FaissIndexFlatL2) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlatL2)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatL2_new(cP_index)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlatL2_new_with function as declared in faiss/IndexFlat_c.h:79
func faiss_IndexFlatL2_new_with(P_index **FaissIndexFlatL2, D int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlatL2)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatL2_new_with(cP_index, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlatL2BaseShift_new function as declared in faiss/IndexFlat_c.h:87
func faiss_IndexFlatL2BaseShift_new(P_index **FaissIndexFlatL2BaseShift, D int32, Nshift uint32, Shift *float32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlatL2BaseShift)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cNshift, cNshiftAllocMap := (C.size_t)(Nshift), cgoAllocsUnknown
	cShift, cShiftAllocMap := (*C.float)(unsafe.Pointer(Shift)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlatL2BaseShift_new(cP_index, cD, cNshift, cShift)
	runtime.KeepAlive(cShiftAllocMap)
	runtime.KeepAlive(cNshiftAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexRefineFlat_new function as declared in faiss/IndexFlat_c.h:96
func faiss_IndexRefineFlat_new(P_index **FaissIndexRefineFlat, Base_index *FaissIndex) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexRefineFlat)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cBase_index, cBase_indexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Base_index)), cgoAllocsUnknown
	__ret := C.faiss_IndexRefineFlat_new(cP_index, cBase_index)
	runtime.KeepAlive(cBase_indexAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexRefineFlat_free function as declared in faiss/IndexFlat_c.h:98
func faiss_IndexRefineFlat_free(Obj *FaissIndexRefineFlat) {
	cObj, cObjAllocMap := (*C.FaissIndexRefineFlat)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexRefineFlat_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_IndexFlat1D_new function as declared in faiss/IndexFlat_c.h:106
func faiss_IndexFlat1D_new(P_index **FaissIndexFlat1D) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlat1D)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_new(cP_index)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlat1D_new_with function as declared in faiss/IndexFlat_c.h:107
func faiss_IndexFlat1D_new_with(P_index **FaissIndexFlat1D, Continuous_update int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexFlat1D)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cContinuous_update, cContinuous_updateAllocMap := (C.int)(Continuous_update), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_new_with(cP_index, cContinuous_update)
	runtime.KeepAlive(cContinuous_updateAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexFlat1D_update_permutation function as declared in faiss/IndexFlat_c.h:109
func faiss_IndexFlat1D_update_permutation(Index *FaissIndexFlat1D) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexFlat1D)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexFlat1D_update_permutation(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_write_index function as declared in faiss/index_io_c.h:27
func faiss_write_index(Idx *FaissIndex, F *FILE) int32 {
	cIdx, cIdxAllocMap := (*C.FaissIndex)(unsafe.Pointer(Idx)), cgoAllocsUnknown
	cF, cFAllocMap := (*C.FILE)(unsafe.Pointer(F)), cgoAllocsUnknown
	__ret := C.faiss_write_index(cIdx, cF)
	runtime.KeepAlive(cFAllocMap)
	runtime.KeepAlive(cIdxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_write_index_fname function as declared in faiss/index_io_c.h:32
func faiss_write_index_fname(Idx *FaissIndex, Fname string) int32 {
	cIdx, cIdxAllocMap := (*C.FaissIndex)(unsafe.Pointer(Idx)), cgoAllocsUnknown
	Fname = safeString(Fname)
	cFname, cFnameAllocMap := unpackPCharString(Fname)
	__ret := C.faiss_write_index_fname(cIdx, cFname)
	runtime.KeepAlive(Fname)
	runtime.KeepAlive(cFnameAllocMap)
	runtime.KeepAlive(cIdxAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_read_index function as declared in faiss/index_io_c.h:40
func faiss_read_index(F *FILE, Io_flags int32, P_out **FaissIndex) int32 {
	cF, cFAllocMap := (*C.FILE)(unsafe.Pointer(F)), cgoAllocsUnknown
	cIo_flags, cIo_flagsAllocMap := (C.int)(Io_flags), cgoAllocsUnknown
	cP_out, cP_outAllocMap := (**C.FaissIndex)(unsafe.Pointer(P_out)), cgoAllocsUnknown
	__ret := C.faiss_read_index(cF, cIo_flags, cP_out)
	runtime.KeepAlive(cP_outAllocMap)
	runtime.KeepAlive(cIo_flagsAllocMap)
	runtime.KeepAlive(cFAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_read_index_fname function as declared in faiss/index_io_c.h:45
func faiss_read_index_fname(Fname string, Io_flags int32, P_out **FaissIndex) int32 {
	Fname = safeString(Fname)
	cFname, cFnameAllocMap := unpackPCharString(Fname)
	cIo_flags, cIo_flagsAllocMap := (C.int)(Io_flags), cgoAllocsUnknown
	cP_out, cP_outAllocMap := (**C.FaissIndex)(unsafe.Pointer(P_out)), cgoAllocsUnknown
	__ret := C.faiss_read_index_fname(cFname, cIo_flags, cP_out)
	runtime.KeepAlive(cP_outAllocMap)
	runtime.KeepAlive(cIo_flagsAllocMap)
	runtime.KeepAlive(Fname)
	runtime.KeepAlive(cFnameAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVF_free function as declared in faiss/IndexIVF_c.h:40
func faiss_IndexIVF_free(Obj *FaissIndexIVF) {
	cObj, cObjAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexIVF_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_IndexIVF_cast function as declared in faiss/IndexIVF_c.h:41
func faiss_IndexIVF_cast(Arg0 *FaissIndex) *FaissIndexIVF {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIVF)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexIVF_nlist function as declared in faiss/IndexIVF_c.h:44
func faiss_IndexIVF_nlist(Arg0 *FaissIndexIVF) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_nlist(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// faiss_IndexIVF_nprobe function as declared in faiss/IndexIVF_c.h:46
func faiss_IndexIVF_nprobe(Arg0 *FaissIndexIVF) uint32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_nprobe(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// faiss_IndexIVF_quantizer function as declared in faiss/IndexIVF_c.h:48
func faiss_IndexIVF_quantizer(Arg0 *FaissIndexIVF) *FaissIndex {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_quantizer(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexIVF_quantizer_trains_alone function as declared in faiss/IndexIVF_c.h:54
func faiss_IndexIVF_quantizer_trains_alone(Arg0 *FaissIndexIVF) byte {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_quantizer_trains_alone(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (byte)(__ret)
	return __v
}

// faiss_IndexIVF_own_fields function as declared in faiss/IndexIVF_c.h:57
func faiss_IndexIVF_own_fields(Arg0 *FaissIndexIVF) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVF_merge_from function as declared in faiss/IndexIVF_c.h:62
func faiss_IndexIVF_merge_from(Index *FaissIndexIVF, Other *FaissIndexIVF, Add_id int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cOther, cOtherAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Other)), cgoAllocsUnknown
	cAdd_id, cAdd_idAllocMap := (C.idx_t)(Add_id), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_merge_from(cIndex, cOther, cAdd_id)
	runtime.KeepAlive(cAdd_idAllocMap)
	runtime.KeepAlive(cOtherAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVF_copy_subset_to function as declared in faiss/IndexIVF_c.h:72
func faiss_IndexIVF_copy_subset_to(Index *FaissIndexIVF, Other *FaissIndexIVF, Subset_type int32, A1 int32, A2 int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cOther, cOtherAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Other)), cgoAllocsUnknown
	cSubset_type, cSubset_typeAllocMap := (C.int)(Subset_type), cgoAllocsUnknown
	cA1, cA1AllocMap := (C.idx_t)(A1), cgoAllocsUnknown
	cA2, cA2AllocMap := (C.idx_t)(A2), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_copy_subset_to(cIndex, cOther, cSubset_type, cA1, cA2)
	runtime.KeepAlive(cA2AllocMap)
	runtime.KeepAlive(cA1AllocMap)
	runtime.KeepAlive(cSubset_typeAllocMap)
	runtime.KeepAlive(cOtherAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVF_search_preassigned function as declared in faiss/IndexIVF_c.h:92
func faiss_IndexIVF_search_preassigned(Index *FaissIndexIVF, N int32, X *float32, K int32, Assign *int32, Centroid_dis *float32, Distances *float32, Labels *int32, Store_pairs int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cK, cKAllocMap := (C.idx_t)(K), cgoAllocsUnknown
	cAssign, cAssignAllocMap := (*C.idx_t)(unsafe.Pointer(Assign)), cgoAllocsUnknown
	cCentroid_dis, cCentroid_disAllocMap := (*C.float)(unsafe.Pointer(Centroid_dis)), cgoAllocsUnknown
	cDistances, cDistancesAllocMap := (*C.float)(unsafe.Pointer(Distances)), cgoAllocsUnknown
	cLabels, cLabelsAllocMap := (*C.idx_t)(unsafe.Pointer(Labels)), cgoAllocsUnknown
	cStore_pairs, cStore_pairsAllocMap := (C.int)(Store_pairs), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_search_preassigned(cIndex, cN, cX, cK, cAssign, cCentroid_dis, cDistances, cLabels, cStore_pairs)
	runtime.KeepAlive(cStore_pairsAllocMap)
	runtime.KeepAlive(cLabelsAllocMap)
	runtime.KeepAlive(cDistancesAllocMap)
	runtime.KeepAlive(cCentroid_disAllocMap)
	runtime.KeepAlive(cAssignAllocMap)
	runtime.KeepAlive(cKAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVF_get_list_size function as declared in faiss/IndexIVF_c.h:97
func faiss_IndexIVF_get_list_size(Index *FaissIndexIVF, List_no uint32) uint32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cList_no, cList_noAllocMap := (C.size_t)(List_no), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_get_list_size(cIndex, cList_no)
	runtime.KeepAlive(cList_noAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// faiss_IndexIVF_make_direct_map function as declared in faiss/IndexIVF_c.h:105
func faiss_IndexIVF_make_direct_map(Index *FaissIndexIVF, New_maintain_direct_map int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cNew_maintain_direct_map, cNew_maintain_direct_mapAllocMap := (C.int)(New_maintain_direct_map), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_make_direct_map(cIndex, cNew_maintain_direct_map)
	runtime.KeepAlive(cNew_maintain_direct_mapAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVF_imbalance_factor function as declared in faiss/IndexIVF_c.h:112
func faiss_IndexIVF_imbalance_factor(Index *FaissIndexIVF) float64 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVF_imbalance_factor(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (float64)(__ret)
	return __v
}

// faiss_IndexIVF_print_stats function as declared in faiss/IndexIVF_c.h:115
func faiss_IndexIVF_print_stats(Index *FaissIndexIVF) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	C.faiss_IndexIVF_print_stats(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
}

// faiss_IndexIVF_invlists_get_ids function as declared in faiss/IndexIVF_c.h:123
func faiss_IndexIVF_invlists_get_ids(Index *FaissIndexIVF, List_no uint32, Invlist *int32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVF)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cList_no, cList_noAllocMap := (C.size_t)(List_no), cgoAllocsUnknown
	cInvlist, cInvlistAllocMap := (*C.idx_t)(unsafe.Pointer(Invlist)), cgoAllocsUnknown
	C.faiss_IndexIVF_invlists_get_ids(cIndex, cList_no, cInvlist)
	runtime.KeepAlive(cInvlistAllocMap)
	runtime.KeepAlive(cList_noAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// faiss_IndexIVFStats_reset function as declared in faiss/IndexIVF_c.h:131
func faiss_IndexIVFStats_reset(Stats *FaissIndexIVFStats) {
	cStats, cStatsAllocMap := (*C.FaissIndexIVFStats)(unsafe.Pointer(Stats)), cgoAllocsUnknown
	C.faiss_IndexIVFStats_reset(cStats)
	runtime.KeepAlive(cStatsAllocMap)
}

// faiss_IndexIVFStats_init function as declared in faiss/IndexIVF_c.h:133
func faiss_IndexIVFStats_init(Stats *FaissIndexIVFStats) {
	cStats, cStatsAllocMap := (*C.FaissIndexIVFStats)(unsafe.Pointer(Stats)), cgoAllocsUnknown
	C.faiss_IndexIVFStats_init(cStats)
	runtime.KeepAlive(cStatsAllocMap)
}

// faiss_IndexIVFFlat_free function as declared in faiss/IndexIVFFlat_c.h:27
func faiss_IndexIVFFlat_free(Obj *FaissIndexIVFFlat) {
	cObj, cObjAllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexIVFFlat_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_IndexIVFFlat_cast function as declared in faiss/IndexIVFFlat_c.h:28
func faiss_IndexIVFFlat_cast(Arg0 *FaissIndex) *FaissIndexIVFFlat {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexIVFFlat)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexIVFFlat_new function as declared in faiss/IndexIVFFlat_c.h:30
func faiss_IndexIVFFlat_new(P_index **FaissIndexIVFFlat) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexIVFFlat)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_new(cP_index)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVFFlat_new_with function as declared in faiss/IndexIVFFlat_c.h:32
func faiss_IndexIVFFlat_new_with(P_index **FaissIndexIVFFlat, Quantizer *FaissIndex, D uint32, Nlist uint32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexIVFFlat)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cQuantizer, cQuantizerAllocMap := (*C.FaissIndex)(unsafe.Pointer(Quantizer)), cgoAllocsUnknown
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cNlist, cNlistAllocMap := (C.size_t)(Nlist), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_new_with(cP_index, cQuantizer, cD, cNlist)
	runtime.KeepAlive(cNlistAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cQuantizerAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVFFlat_new_with_metric function as declared in faiss/IndexIVFFlat_c.h:35
func faiss_IndexIVFFlat_new_with_metric(P_index **FaissIndexIVFFlat, Quantizer *FaissIndex, D uint32, Nlist uint32, Metric FaissMetricType) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexIVFFlat)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cQuantizer, cQuantizerAllocMap := (*C.FaissIndex)(unsafe.Pointer(Quantizer)), cgoAllocsUnknown
	cD, cDAllocMap := (C.size_t)(D), cgoAllocsUnknown
	cNlist, cNlistAllocMap := (C.size_t)(Nlist), cgoAllocsUnknown
	cMetric, cMetricAllocMap := (C.FaissMetricType)(Metric), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_new_with_metric(cP_index, cQuantizer, cD, cNlist, cMetric)
	runtime.KeepAlive(cMetricAllocMap)
	runtime.KeepAlive(cNlistAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cQuantizerAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVFFlat_add_core function as declared in faiss/IndexIVFFlat_c.h:39
func faiss_IndexIVFFlat_add_core(Index *FaissIndexIVFFlat, N int32, X *float32, Xids *int32, Precomputed_idx *int32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cN, cNAllocMap := (C.idx_t)(N), cgoAllocsUnknown
	cX, cXAllocMap := (*C.float)(unsafe.Pointer(X)), cgoAllocsUnknown
	cXids, cXidsAllocMap := (*C.idx_t)(unsafe.Pointer(Xids)), cgoAllocsUnknown
	cPrecomputed_idx, cPrecomputed_idxAllocMap := (*C.int64_t)(unsafe.Pointer(Precomputed_idx)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_add_core(cIndex, cN, cX, cXids, cPrecomputed_idx)
	runtime.KeepAlive(cPrecomputed_idxAllocMap)
	runtime.KeepAlive(cXidsAllocMap)
	runtime.KeepAlive(cXAllocMap)
	runtime.KeepAlive(cNAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIVFFlat_update_vectors function as declared in faiss/IndexIVFFlat_c.h:50
func faiss_IndexIVFFlat_update_vectors(Index *FaissIndexIVFFlat, Nv int32, Idx *int32, V *float32) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIVFFlat)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cNv, cNvAllocMap := (C.int)(Nv), cgoAllocsUnknown
	cIdx, cIdxAllocMap := (*C.idx_t)(unsafe.Pointer(Idx)), cgoAllocsUnknown
	cV, cVAllocMap := (*C.float)(unsafe.Pointer(V)), cgoAllocsUnknown
	__ret := C.faiss_IndexIVFFlat_update_vectors(cIndex, cNv, cIdx, cV)
	runtime.KeepAlive(cVAllocMap)
	runtime.KeepAlive(cIdxAllocMap)
	runtime.KeepAlive(cNvAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexLSH_free function as declared in faiss/IndexLSH_c.h:24
func faiss_IndexLSH_free(Obj *FaissIndexLSH) {
	cObj, cObjAllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexLSH_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_IndexLSH_cast function as declared in faiss/IndexLSH_c.h:25
func faiss_IndexLSH_cast(Arg0 *FaissIndex) *FaissIndexLSH {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexLSH)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexLSH_nbits function as declared in faiss/IndexLSH_c.h:27
func faiss_IndexLSH_nbits(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_nbits(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexLSH_bytes_per_vec function as declared in faiss/IndexLSH_c.h:28
func faiss_IndexLSH_bytes_per_vec(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_bytes_per_vec(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexLSH_rotate_data function as declared in faiss/IndexLSH_c.h:29
func faiss_IndexLSH_rotate_data(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_rotate_data(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexLSH_train_thresholds function as declared in faiss/IndexLSH_c.h:30
func faiss_IndexLSH_train_thresholds(Arg0 *FaissIndexLSH) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexLSH)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_train_thresholds(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexLSH_new function as declared in faiss/IndexLSH_c.h:32
func faiss_IndexLSH_new(P_index **FaissIndexLSH, D int32, Nbits int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexLSH)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cNbits, cNbitsAllocMap := (C.int)(Nbits), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_new(cP_index, cD, cNbits)
	runtime.KeepAlive(cNbitsAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexLSH_new_with_options function as declared in faiss/IndexLSH_c.h:34
func faiss_IndexLSH_new_with_options(P_index **FaissIndexLSH, D int32, Nbits int32, Rotate_data int32, Train_thresholds int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexLSH)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cNbits, cNbitsAllocMap := (C.int)(Nbits), cgoAllocsUnknown
	cRotate_data, cRotate_dataAllocMap := (C.int)(Rotate_data), cgoAllocsUnknown
	cTrain_thresholds, cTrain_thresholdsAllocMap := (C.int)(Train_thresholds), cgoAllocsUnknown
	__ret := C.faiss_IndexLSH_new_with_options(cP_index, cD, cNbits, cRotate_data, cTrain_thresholds)
	runtime.KeepAlive(cTrain_thresholdsAllocMap)
	runtime.KeepAlive(cRotate_dataAllocMap)
	runtime.KeepAlive(cNbitsAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexPreTransform_free function as declared in faiss/IndexPreTransform_c.h:22
func faiss_IndexPreTransform_free(Obj *FaissIndexPreTransform) {
	cObj, cObjAllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Obj)), cgoAllocsUnknown
	C.faiss_IndexPreTransform_free(cObj)
	runtime.KeepAlive(cObjAllocMap)
}

// faiss_IndexPreTransform_cast function as declared in faiss/IndexPreTransform_c.h:23
func faiss_IndexPreTransform_cast(Arg0 *FaissIndex) *FaissIndexPreTransform {
	cArg0, cArg0AllocMap := (*C.FaissIndex)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_cast(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndexPreTransform)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexPreTransform_index function as declared in faiss/IndexPreTransform_c.h:25
func faiss_IndexPreTransform_index(Arg0 *FaissIndexPreTransform) *FaissIndex {
	cArg0, cArg0AllocMap := (*C.FaissIndexPreTransform)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexPreTransform_index(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexShards_own_fields function as declared in faiss/IndexShards_c.h:25
func faiss_IndexShards_own_fields(Arg0 *FaissIndexShards) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexShards_set_own_fields function as declared in faiss/IndexShards_c.h:25
func faiss_IndexShards_set_own_fields(Arg0 *FaissIndexShards, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexShards_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// faiss_IndexShards_set_successive_ids function as declared in faiss/IndexShards_c.h:26
func faiss_IndexShards_set_successive_ids(Arg0 *FaissIndexShards, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexShards_set_successive_ids(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// faiss_IndexShards_successive_ids function as declared in faiss/IndexShards_c.h:26
func faiss_IndexShards_successive_ids(Arg0 *FaissIndexShards) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_successive_ids(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexShards_new function as declared in faiss/IndexShards_c.h:28
func faiss_IndexShards_new(P_index **FaissIndexShards, D int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexShards)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_new(cP_index, cD)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexShards_new_with_options function as declared in faiss/IndexShards_c.h:30
func faiss_IndexShards_new_with_options(P_index **FaissIndexShards, D int32, Threaded int32, Successive_ids int32) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexShards)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cD, cDAllocMap := (C.idx_t)(D), cgoAllocsUnknown
	cThreaded, cThreadedAllocMap := (C.int)(Threaded), cgoAllocsUnknown
	cSuccessive_ids, cSuccessive_idsAllocMap := (C.int)(Successive_ids), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_new_with_options(cP_index, cD, cThreaded, cSuccessive_ids)
	runtime.KeepAlive(cSuccessive_idsAllocMap)
	runtime.KeepAlive(cThreadedAllocMap)
	runtime.KeepAlive(cDAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexShards_add_shard function as declared in faiss/IndexShards_c.h:32
func faiss_IndexShards_add_shard(Index *FaissIndexShards, Shard *FaissIndex) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cShard, cShardAllocMap := (*C.FaissIndex)(unsafe.Pointer(Shard)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_add_shard(cIndex, cShard)
	runtime.KeepAlive(cShardAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexShards_sync_with_shard_indexes function as declared in faiss/IndexShards_c.h:35
func faiss_IndexShards_sync_with_shard_indexes(Index *FaissIndexShards) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_sync_with_shard_indexes(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexShards_at function as declared in faiss/IndexShards_c.h:37
func faiss_IndexShards_at(Index *FaissIndexShards, I int32) *FaissIndex {
	cIndex, cIndexAllocMap := (*C.FaissIndexShards)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cI, cIAllocMap := (C.int)(I), cgoAllocsUnknown
	__ret := C.faiss_IndexShards_at(cIndex, cI)
	runtime.KeepAlive(cIAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := *(**FaissIndex)(unsafe.Pointer(&__ret))
	return __v
}

// faiss_IndexIDMap_own_fields function as declared in faiss/MetaIndexes_c.h:24
func faiss_IndexIDMap_own_fields(Arg0 *FaissIndexIDMap) int32 {
	cArg0, cArg0AllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap_own_fields(cArg0)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIDMap_set_own_fields function as declared in faiss/MetaIndexes_c.h:24
func faiss_IndexIDMap_set_own_fields(Arg0 *FaissIndexIDMap, Arg1 int32) {
	cArg0, cArg0AllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Arg0)), cgoAllocsUnknown
	cArg1, cArg1AllocMap := (C.int)(Arg1), cgoAllocsUnknown
	C.faiss_IndexIDMap_set_own_fields(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
}

// faiss_IndexIDMap_new function as declared in faiss/MetaIndexes_c.h:26
func faiss_IndexIDMap_new(P_index **FaissIndexIDMap, Index *FaissIndex) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexIDMap)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap_new(cP_index, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIDMap_id_map function as declared in faiss/MetaIndexes_c.h:35
func faiss_IndexIDMap_id_map(Index *FaissIndexIDMap, P_id_map []*int32, P_size *uint32) {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap)(unsafe.Pointer(Index)), cgoAllocsUnknown
	cP_id_map, cP_id_mapAllocMap := copyPIdxBytes((*sliceHeader)(unsafe.Pointer(&P_id_map)))
	cP_size, cP_sizeAllocMap := (*C.size_t)(unsafe.Pointer(P_size)), cgoAllocsUnknown
	C.faiss_IndexIDMap_id_map(cIndex, cP_id_map, cP_size)
	runtime.KeepAlive(cP_sizeAllocMap)
	runtime.KeepAlive(cP_id_mapAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
}

// faiss_IndexIDMap2_new function as declared in faiss/MetaIndexes_c.h:41
func faiss_IndexIDMap2_new(P_index **FaissIndexIDMap2, Index *FaissIndex) int32 {
	cP_index, cP_indexAllocMap := (**C.FaissIndexIDMap2)(unsafe.Pointer(P_index)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.FaissIndex)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_new(cP_index, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cP_indexAllocMap)
	__v := (int32)(__ret)
	return __v
}

// faiss_IndexIDMap2_construct_rev_map function as declared in faiss/MetaIndexes_c.h:44
func faiss_IndexIDMap2_construct_rev_map(Index *FaissIndexIDMap2) int32 {
	cIndex, cIndexAllocMap := (*C.FaissIndexIDMap2)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.faiss_IndexIDMap2_construct_rev_map(cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (int32)(__ret)
	return __v
}
